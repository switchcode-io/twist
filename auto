import httplib
import json
import ssl
import os

# Configuration - replace with your Prisma Cloud Compute Console URL and API token
console_url = "<your-twistlock-console-url>"  # Example: twistlock.company.com (without https://)
api_token = "<your-api-token>"
output_directory = "./twistlock_scans"

# Create SSL context for secure connection
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

def get_vulnerability_scan_results():
    """
    Fetch the vulnerability scan results from Prisma Cloud Compute.
    """
    conn = httplib.HTTPSConnection(console_url, context=context)
    
    headers = {
        "Authorization": "Bearer {}".format(api_token),
        "Content-Type": "application/json"
    }

    try:
        conn.request("GET", "/api/v1/vulnerabilities/scans", headers=headers)
        response = conn.getresponse()
        if response.status != 200:
            print("Error: {} {}".format(response.status, response.reason))
            return None
        
        data = response.read()
        return json.loads(data)
    except Exception as e:
        print("Error fetching scan results: {}".format(e))
        return None
    finally:
        conn.close()

def save_scan_results_to_file(scan_data, filename="vulnerability_scan_results.json"):
    """
    Save scan results to a JSON file.
    """
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    file_path = os.path.join(output_directory, filename)

    try:
        with open(file_path, 'w') as f:
            json.dump(scan_data, f, indent=4)
        print("Scan results saved to {}".format(file_path))
    except Exception as e:
        print("Error saving scan results to file: {}".format(e))

def main():
    print("Fetching vulnerability scan results from Twistlock...")
    scan_results = get_vulnerability_scan_results()
    
    if scan_results:
        print("Successfully retrieved scan results.")
        save_scan_results_to_file(scan_results)
    else:
        print("Failed to retrieve scan results.")

if __name__ == "__main__":
    main()